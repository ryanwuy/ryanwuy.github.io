<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山精神病院</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wying.xyz/"/>
  <updated>2018-12-05T23:01:55.400Z</updated>
  <id>http://www.wying.xyz/</id>
  
  <author>
    <name>Ryan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java中Base64转码与解码（加密与解密）原理与使用</title>
    <link href="http://www.wying.xyz//posts/06126.html"/>
    <id>http://www.wying.xyz//posts/06126.html</id>
    <published>2018-12-05T23:01:00.000Z</published>
    <updated>2018-12-05T23:01:55.400Z</updated>
    
    <content type="html"><![CDATA[<p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，大家可以查看RFC2045~RFC2049，上面有MIME的详细规范。</p><p>Base64编码可用于在HTTP环境下传递较长的标识信息。<br>例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符(一般为128-bit的UUID)编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL(包括隐藏表单域)中的形式。此时，采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到，算是起到一个加密的作用。</p><p>Base64使用A–Z,a–z,0–9,+,/ 这64个字符，编码原理是将3个字节转换成4个字节( (3 X 8) = 24 = (4 X 6) )先读入3个字节,每读一个字节,左移8位,再右移四次,每次6位,这样就有4个字节了，这样还不能保证得到的字符都是可见字符，为了达到此目的，Base64制定了一个编码表，进行统一的转换。<br>码表的大小为2^6=64，这也是Base64名称的由来。 当剩下的字符数量不足3个字节时，则应使用0进行填充，相应的，输出字符则使用’=’占位，因此编码后输出的文本末尾可能会出现1至2个’=’。解码原理是将4个字节转换成3个字节.先读入4个6位(用或运算),每次左移6位,再右移3次,每次8位，这样就还原了。</p><p>####<strong>Base64编码表</strong>####</p><table><thead><tr><th style="text-align:center">Value Encoding</th><th style="text-align:center">Value Encoding</th><th style="text-align:center">Value Encoding</th><th style="text-align:center">Value Encoding</th></tr></thead><tbody><tr><td style="text-align:center">0 A</td><td style="text-align:center">17 R</td><td style="text-align:center">34 i</td><td style="text-align:center">51 z</td></tr><tr><td style="text-align:center">1 B</td><td style="text-align:center">18 S</td><td style="text-align:center">35 j</td><td style="text-align:center">52 0</td></tr><tr><td style="text-align:center">2 C</td><td style="text-align:center">19 T</td><td style="text-align:center">36 k</td><td style="text-align:center">53 1</td></tr><tr><td style="text-align:center">3 D</td><td style="text-align:center">20 U</td><td style="text-align:center">37 l</td><td style="text-align:center">54 2</td></tr><tr><td style="text-align:center">4 E</td><td style="text-align:center">21 V</td><td style="text-align:center">38 m</td><td style="text-align:center">55 3</td></tr><tr><td style="text-align:center">5 F</td><td style="text-align:center">22 W</td><td style="text-align:center">39 n</td><td style="text-align:center">56 4</td></tr><tr><td style="text-align:center">6 G</td><td style="text-align:center">23 X</td><td style="text-align:center">40 o</td><td style="text-align:center">57 5</td></tr><tr><td style="text-align:center">7 H</td><td style="text-align:center">24 Y</td><td style="text-align:center">41 p</td><td style="text-align:center">58 6</td></tr><tr><td style="text-align:center">8 I</td><td style="text-align:center">25 Z</td><td style="text-align:center">42 q</td><td style="text-align:center">59 7</td></tr><tr><td style="text-align:center">9 J</td><td style="text-align:center">26 a</td><td style="text-align:center">43 r</td><td style="text-align:center">60 8</td></tr><tr><td style="text-align:center">10 K</td><td style="text-align:center">27 b</td><td style="text-align:center">44 s</td><td style="text-align:center">61 9</td></tr><tr><td style="text-align:center">11 L</td><td style="text-align:center">28 c</td><td style="text-align:center">45 t</td><td style="text-align:center">62 +</td></tr><tr><td style="text-align:center">12 M</td><td style="text-align:center">29 d</td><td style="text-align:center">46 u</td><td style="text-align:center">63 /</td></tr><tr><td style="text-align:center">13 N</td><td style="text-align:center">30 e</td><td style="text-align:center">47 v</td></tr><tr><td style="text-align:center">14 O</td><td style="text-align:center">31 f</td><td style="text-align:center">48 w</td><td style="text-align:center">(pad) =</td></tr><tr><td style="text-align:center">15 P</td><td style="text-align:center">32 g</td><td style="text-align:center">49 x</td></tr><tr><td style="text-align:center">16 Q</td><td style="text-align:center">33 h</td><td style="text-align:center">50 y</td></tr></tbody></table><p>Base64是一种很常见的编码规范，其作用是将二进制序列转换为人类可读的ASCII字符序列，<strong>常用在需用通过文本协议（比如HTTP和SMTP）来传输二进制数据的情况下</strong>。</p><p>Base64并不是一种用于安全领域的加密解密算法（这类算法有DES等），尽管我们有时也听到使用Base64来加密解密的说法，但这里所说的加密与解密实际是指编码（encode）和解码（decode）的过程，其变换是非常简单的，仅仅能够避免信息被直接识别。</p><p>Base64编解码算法都很简单，网上有很多源码，这里就不介绍了。</p><p>那java中如何使用这种编码呢？其实JDK里边相应的类和方法，但是API里是看不到的，网上都说是编写JDK的内部人员专用的，java中可以直接使用，但不提倡大家用，可以看看这个<a href="http://wenda.haosou.com/q/1378566517069409" title="点击查看" target="_blank" rel="noopener">http://wenda.haosou.com/q/1378566517069409</a>。</p><p>不过，对此有开源的jar包</p><blockquote><p>javabase64-1.2.jar<br>下载地址：<a href="http://files.blogjava.net/xmatthew/javabase64-1.2.jar.zip" title="点击下载" target="_blank" rel="noopener">http://files.blogjava.net/xmatthew/javabase64-1.2.jar.zip</a>。</p></blockquote><p>引入这个jar包后，几行代码就可以实现编码与解码了：</p><p>####示例代码:####</p><p>####String类型：进行Base64编码####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String encoded = Base64.encode(&quot;Hello, world!&quot;);</span><br></pre></td></tr></table></figure><p>####String类型：进行Base64解码####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String decoded = Base64.decode(encoded);</span><br></pre></td></tr></table></figure><p>####指定字符编码方式####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String encoded = Base64.encode(&quot;Hello, world!&quot;, &quot;UTF-8&quot;);</span><br><span class="line">String decoded = Base64.decode(encoded, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure><p>####对文件进行编码:####</p><p>如果文件比较小，可以通过以下方式，直接读取到内存中进行编码处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte[] source = ...; // load your data here</span><br><span class="line">byte[] encoded = Base64.encode(source);</span><br><span class="line">byte[] decoded = Base64.decode(encoded);</span><br></pre></td></tr></table></figure><p>如果大件比较大，则建议使用stream:</p><p>####代码示例Base64编码：####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = new FileInputStream(&quot;source.jpg&quot;);</span><br><span class="line">OutputStream outputStream = new FileOutputStream(&quot;encoded.b64&quot;);</span><br><span class="line">Base64.encode(inputStream, outputStream);</span><br><span class="line">outputStream.close();</span><br><span class="line">inputStream.close();</span><br></pre></td></tr></table></figure><p>####代码示例Base64解码：####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = new FileInputStream(&quot;encoded.b64&quot;);</span><br><span class="line">OutputStream outputStream = new FileOutputStream(&quot;decoded.jpg&quot;);</span><br><span class="line">Base64.decode(inputStream, outputStream);</span><br><span class="line">outputStream.close();</span><br><span class="line">inputStream.close();</span><br></pre></td></tr></table></figure><hr><blockquote><p>作者：Java我人生<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/chenleixing/article/details/46543901" title="点击跳转" target="_blank" rel="noopener">https://blog.csdn.net/chenleixing/article/details/46543901</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，大家可以查看RFC2045~RFC2049，上面有MIME的详细规范。&lt;/p&gt;
&lt;p&gt;Base64编码可用于在HTTP环境下传递较长的标识信息。&lt;br&gt;例如，在Java Persistence系统Hiber
      
    
    </summary>
    
    
      <category term="base64,加密,解密,java,原理" scheme="http://www.wying.xyz/tags/base64-%E5%8A%A0%E5%AF%86-%E8%A7%A3%E5%AF%86-java-%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>[Lua]获取文件夹大小</title>
    <link href="http://www.wying.xyz//posts/06126.html"/>
    <id>http://www.wying.xyz//posts/06126.html</id>
    <published>2018-12-05T22:57:21.000Z</published>
    <updated>2018-12-05T23:02:52.780Z</updated>
    
    <content type="html"><![CDATA[<p>发现Lua有获取文件字节和大小的代码，却没有获取文件夹底下所有文件的大小的代码，所以自己写了一个函数，分享给大家以及留作备份。</p><p>本病人在这一行还是新手，写得不好或者有错误的见谅一下</p><blockquote><p>原理：<br>遍历循环并获取文件夹底下所有文件的字节大小，之后进行换算，返回结果</p></blockquote><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">--获取文件夹大小</span><br><span class="line">function getFolderSize(folderPath,conversion)</span><br><span class="line">  import &quot;java.io.*&quot;</span><br><span class="line">  local size = 0</span><br><span class="line">  local fileList = luajava.astable(File(folderPath).listFiles())</span><br><span class="line"></span><br><span class="line">  if(fileList == nil) then</span><br><span class="line">    return 0</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  --开始遍历循环获取文件夹底下所有文件的字节大小</span><br><span class="line">  if(fileList ~= nil) then</span><br><span class="line">    for count=1,#fileList do</span><br><span class="line">      if(File(tostring(fileList[count])).isDirectory()) then</span><br><span class="line">        size = size + getFolderSize(tostring(fileList[count]))</span><br><span class="line">      else</span><br><span class="line">        local singleFileSize = File(tostring(fileList[count])).length()</span><br><span class="line">        size = size + singleFileSize</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">  --字节换算</span><br><span class="line">  if(conversion == true) then</span><br><span class="line">    local GB = 1024 * 1024 * 1024;--定义GB的计算常量</span><br><span class="line">    local MB = 1024 * 1024;--定义MB的计算常量</span><br><span class="line">    local KB = 1024;--定义KB的计算常量</span><br><span class="line">    local countResult = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if(size / GB &gt;= 1) then</span><br><span class="line">      --如果当前Byte的值大于等于1GB</span><br><span class="line">      countResult = string.format(&quot;%.2f&quot;,size / GB)..&quot;GB&quot;</span><br><span class="line">      return countResult</span><br><span class="line">    elseif (size / MB &gt;= 1) then</span><br><span class="line">      --如果当前Byte的值大于等于1MB</span><br><span class="line">      countResult = string.format(&quot;%.2f&quot;,size / MB)..&quot;MB&quot;</span><br><span class="line">      return countResult</span><br><span class="line">    elseif (size / KB &gt;= 1) then</span><br><span class="line">      --如果当前Byte的值大于等于1KB</span><br><span class="line">      countResult = string.format(&quot;%.2f&quot;,size / KB)..&quot;KB&quot;</span><br><span class="line">      return countResult</span><br><span class="line">    else</span><br><span class="line">      countResult = size..&quot;B&quot;</span><br><span class="line">      return countResult</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">  elseif(conversion == nil or conversion == false) then</span><br><span class="line">    return size</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>使用方法：<br>    getFolderSize(文件夹路径,是否进行转换true或false)<br>转换后将以G,M,KB的形式返回结果，否则直接返回总字节大小</p></blockquote><p><strong>代码来自：<a href="http://www.jefflemon.com" target="_blank" rel="noopener">303病人</a></strong></p><p><strong>拿走麻烦留下言一下好嘛？</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现Lua有获取文件字节和大小的代码，却没有获取文件夹底下所有文件的大小的代码，所以自己写了一个函数，分享给大家以及留作备份。&lt;/p&gt;
&lt;p&gt;本病人在这一行还是新手，写得不好或者有错误的见谅一下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理：&lt;br&gt;遍历循环并获取文件夹底下
      
    
    </summary>
    
    
      <category term="Lua,Android,AndroLua,文件夹,大小" scheme="http://www.wying.xyz/tags/Lua-Android-AndroLua-%E6%96%87%E4%BB%B6%E5%A4%B9-%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
</feed>
