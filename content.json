{"meta":{"title":"青山精神病院","subtitle":null,"description":null,"author":"Ryan","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"[Lua]获取文件夹大小","slug":"Lua-获取文件夹大小","date":"2018-12-05T21:34:39.000Z","updated":"2018-12-05T21:42:42.339Z","comments":true,"path":"06126.html","link":"","permalink":"http://yoursite.com/06126.html","excerpt":"","text":"发现Lua有获取文件字节和大小的代码，却没有获取文件夹底下所有文件的大小的代码，所以自己写了一个函数，分享给大家以及留作备份。 本病人在这一行还是新手，写得不好或者有错误的见谅一下 原理：遍历循环并获取文件夹底下所有文件的字节大小，之后进行换算，返回结果 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950--获取文件夹大小function getFolderSize(folderPath,conversion) import &quot;java.io.*&quot; local size = 0 local fileList = luajava.astable(File(folderPath).listFiles()) if(fileList == nil) then return 0 end --开始遍历循环获取文件夹底下所有文件的字节大小 if(fileList ~= nil) then for count=1,#fileList do if(File(tostring(fileList[count])).isDirectory()) then size = size + getFolderSize(tostring(fileList[count])) else local singleFileSize = File(tostring(fileList[count])).length() size = size + singleFileSize end end end --字节换算 if(conversion == true) then local GB = 1024 * 1024 * 1024;--定义GB的计算常量 local MB = 1024 * 1024;--定义MB的计算常量 local KB = 1024;--定义KB的计算常量 local countResult = &quot;&quot; if(size / GB &gt;= 1) then --如果当前Byte的值大于等于1GB countResult = string.format(&quot;%.2f&quot;,size / GB)..&quot;GB&quot; return countResult elseif (size / MB &gt;= 1) then --如果当前Byte的值大于等于1MB countResult = string.format(&quot;%.2f&quot;,size / MB)..&quot;MB&quot; return countResult elseif (size / KB &gt;= 1) then --如果当前Byte的值大于等于1KB countResult = string.format(&quot;%.2f&quot;,size / KB)..&quot;KB&quot; return countResult else countResult = size..&quot;B&quot; return countResult end elseif(conversion == nil or conversion == false) then return size endend 使用方法： getFolderSize(文件夹路径,是否进行转换true或false)转换后将以G,M,KB的形式返回结果，否则直接返回总字节大小 代码来自：303病人 拿走麻烦留下言一下好嘛？","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-12-05T20:34:16.251Z","updated":"2018-12-05T20:34:16.251Z","comments":true,"path":"06126.html","link":"","permalink":"http://yoursite.com/06126.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}